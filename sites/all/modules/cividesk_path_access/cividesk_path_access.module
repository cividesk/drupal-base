<?php

/**
 * @file
 * Restricts access to any Drupal path on a per-role basis.
 *
 * @author:Sachin Doijad
 * @usage: ?q=admin/config/people/pathaccess to configure path restrictions for each role.
 */

/**
 * Show this block on every page except the listed pages.
 */
define('cividesk_path_access_VISIBILITY_NOTLISTED', 0);

/**
 * Show this block on only the listed pages.
 */
define('cividesk_path_access_VISIBILITY_LISTED', 1);

/**
 * Implements hook_menu_alter().
 */
function cividesk_path_access_menu_alter(&$items) {
  foreach ($items as $path => &$item) {
    chain_menu_access_chain($items, $path, '_cividesk_path_access_check_permission');
  }
}

/**
 * Implements hook_form_alter().
 */
function cividesk_path_access_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == "cividesk_path_access_admin_configure_form") {
    global $user;
    if(isset($user->mail)) {
      list($uname, $domain) = explode('@', $user->mail);
      if($domain != "cividesk.com") {
        drupal_access_denied();
        module_invoke_all('exit');
        drupal_exit();
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function cividesk_path_access_menu() {
  $items = array();
  $items['admin/config/people/civipathaccess'] = array(
    'title' => t('CiviDesk Path Access'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cividesk_path_access_admin_configure_form'),
    'access arguments' => array('administer permissions'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Access callback; patch access check.
 */
function _cividesk_path_access_check_permission() {
  global $user;

  // User #1 has all privileges:
  if ($user->uid == 1) {
    return 1;
  }

  //Check for Cividesk users and skip Path access setting for Cividesk Users
  if(isset($user->mail)) {
    list($uname, $domain) = explode('@', $user->mail);
    if($domain == "cividesk.com") {
      return 1;
    }
  }

  foreach ($user->roles as $k => $v) {
    $role = $k;
  }

  $visibility = cividesk_path_access_VISIBILITY_LISTED;
  $pages = '';
  $role = 2;
  $result = db_query('SELECT pages, visibility FROM {cividesk_path_access} WHERE rid = :role', array( ':role' => $role ));
  foreach ($result as $role) {
    $pages .= $role->pages . "\n";
    $visibility = $role->visibility && $visibility;
  }

  $visibility = ($visibility > 0) ? cividesk_path_access_VISIBILITY_LISTED : cividesk_path_access_VISIBILITY_NOTLISTED;

  // Match path if necessary.
  if ($pages) {
    // Convert path to lowercase. This allows comparison of the same path
    // with different case. Ex: /Page, /page, /PAGE.
    $pages = drupal_strtolower($pages);
    // Convert the Drupal path to lowercase
    $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
    // Compare the lowercase internal and lowercase path alias (if any).
    $page_match = drupal_match_path($path, $pages);

    if ($path != $_GET['q']) {
      $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
    }

    // When $visibility has a value of 0 (cividesk_path_access_VISIBILITY_NOTLISTED),
    // the block is displayed on all pages except those listed in $pages.
    // When set to 1 (cividesk_path_access_VISIBILITY_LISTED), it is displayed only on
    // those pages listed in $pages.
    $page_match = !($visibility xor $page_match);
  }
  else {
    $page_match = TRUE;
  }

  // Check that the current page is not a protected page before blocking user.
  if (!$page_match && !cividesk_path_access_protected_pages($path)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Menu callback; displays the path access configuration form.
 */
function cividesk_path_access_admin_roles() {
  // Render the role overview.
  $result = db_query('SELECT * FROM {role} ORDER BY name');
  $table['header'] = array(t('User Role'), t('Operations'));
  foreach ($result as $role) {
    $table['rows'][] = array($role->name, l(t('edit'), 'admin/config/people/civipathaccess/edit/' . $role->rid));
  }
  $output = theme('table', $table);

  return $output;
}

/**
 * Define role access form.
 */
function cividesk_path_access_admin_configure_form($form, &$form_state, $role) {
  $role->rid = 2;
  $settings = db_query('SELECT * FROM {cividesk_path_access} pa INNER JOIN {role} r ON pa.rid = r.rid')->fetchObject();

  // Set up the database entry ready for updating.
  if (!$settings) {
    db_query("INSERT INTO {cividesk_path_access} (rid, pages, visibility) VALUES (:rid, '', 0)", array(':rid' => $role->rid));
  }

  drupal_set_title(t("CiviDesk Path access"));

  $form['page_vis_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Enter the page url that needs to block'),
    '#collapsible' => FALSE,
  );
  $form['page_vis_settings']['pages'] = array(
    '#type' => 'textarea',
    '#title' => t('Pages'),
    '#default_value' =>!empty($settings->pages)? $settings->pages : '',
    '#description' => t("Enter one page per line as a path. The '*' character is a wildcard. Example paths are '<em>blog</em>' for the blog page and '<em>blog/*</em>' for every personal blog. '<em>&lt;front&gt;</em>' is the front page."),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save path access'),
  );
  $form['rid'] = array(
    '#type' => 'value',
    '#value' => $role->rid
  );

  return $form;
}

/**
 * Validate role access form submission.
 */
function cividesk_path_access_admin_configure_form_validate($form_id, &$form_state) {
  if ( $form_state['values']['visibility'] == 0 ) {
    // Prevent protected pages from being listed.
    $pages = explode("\n", $form_state['values']['pages']);
    foreach ( $pages as $page ) {
      if ( cividesk_path_access_protected_pages($page) ) {
        form_set_error('pages', t('You cannot block access to the %protected page.', array('%protected' => $page)));
      }
    }
  }
  // else ... do we *require* that each protected page be visible?
}

/**
 * Process role access form submission
 */
function cividesk_path_access_admin_configure_form_submit($form_id, &$form_state) {
  // Set this visibility setting for all roles ( ie. all authenticated users ( rid: 2 )
  $form_state['values']['rid'] = 2;
  $form_state['values']['visibility'] = 0;

  db_query("UPDATE {cividesk_path_access} SET visibility = :visibility, pages = :pages WHERE rid = :rid", array(':rid' => $form_state['values']['rid'], ':visibility' => $form_state['values']['visibility'], ':pages' => $form_state['values']['pages']));
  menu_cache_clear_all();
  drupal_set_message(t('The cividesk path access configuration has been saved.'));
  $form_state['redirect'] = 'admin/config/people/civipathaccess';
}

/**
 * Protected Pages can never be restricted using cividesk_path_access.
 *
 * @TODO This should be a variable_get() so it's customisable per-site.
 */
function cividesk_path_access_protected_pages($page) {
  $pages = array(
    'user/logout',
  );
  return in_array($page, $pages);
}
